/**
 * 
 */
package com.blackducksoftware.tools.vuln_collector;

import com.blackducksoftware.tools.commonframework.core.exception.CommonFrameworkException;
import com.blackducksoftware.tools.vuln_collector.cc.VCCodeCenterCollector;
import com.blackducksoftware.tools.vuln_collector.model.ProtexComponentList;
import com.blackducksoftware.tools.vuln_collector.protex.VCProtexCollector;

/**
 * External hook for the vulnerability collector, use this class if invoking this utility
 * as a dependency
 * 
 * @author akamen
 * 
 */
public class VCProcessorExternal extends VCProcessor {

    /**
     * Constructor used for externally invoking the vulnerability collector
     * 
     * @param configLocation
     * @throws CommonFrameworkException
     */
    public VCProcessorExternal(String configLocation)
            throws CommonFrameworkException {
        super();
        vcConfigManager = new VCConfigurationManager(configLocation);

        vcCCCollector = new VCCodeCenterCollector(vcConfigManager);
        vcProtexCollector = new VCProtexCollector(vcConfigManager);
        // This constructor does not require a report location.
        reportLocation = null;
    }

    /**
     * Returns all vulnerabilities for components with a specified Protex project
     */
    @Override
    public ProtexComponentList getComponentVulnerabilities(String project) throws VulnerabilityCollectorException
    {
        return super.getComponentVulnerabilities(project);
    }
}
