/*******************************************************************************
 * Copyright (C) 2015 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2 only
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License version 2
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *******************************************************************************/
package com.blackducksoftware.tools.vuln_collector;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

import com.blackducksoftware.tools.commonframework.core.exception.CommonFrameworkException;
import com.blackducksoftware.tools.vuln_collector.cc.VCCodeCenterCollector;
import com.blackducksoftware.tools.vuln_collector.cc.VCConfigCCManager;
import com.blackducksoftware.tools.vuln_collector.model.ProtexComponentList;
import com.blackducksoftware.tools.vuln_collector.protex.VCConfigProtexManager;
import com.blackducksoftware.tools.vuln_collector.protex.VCProtexCollector;
import com.blackducksoftware.tools.vuln_collector.protex.VCProtexComponent;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * Processes the report by: - Invoking the Protex server - Collecting the BOM -
 * Invoking the Code Center Server - Collecting the vulnerabilities
 * 
 * @author akamen
 * 
 */
public class VCProcessor {

    private Logger log = Logger.getLogger(VCProcessor.class.getClass()
	    .getName());

    final private VCConfigProtexManager vcProtexConfig;
    final private VCConfigCCManager vcCCConfig;

    final private VCCodeCenterCollector vcCCCollector;
    final private VCProtexCollector vcProtexCollector;

    // Optional project name
    private String[] userProvidedList;

    final private File reportLocation;

    final private static String WEB_RESOURCE = "web";
    final private static String JSON_DATA_DIRECTORY = "jsondata";

    public VCProcessor(String configLocation, String[] projectNameList)
	    throws Exception {
	this.userProvidedList = projectNameList;
	vcProtexConfig = new VCConfigProtexManager(configLocation);
	vcCCConfig = new VCConfigCCManager(configLocation);
	vcCCCollector = new VCCodeCenterCollector(vcCCConfig);
	vcProtexCollector = new VCProtexCollector(vcProtexConfig);

	reportLocation = getReportLocation();
	// If the user list is empty, use the configuration file
	try {
	    if (userProvidedList == null)
		userProvidedList = getProjectList(vcProtexConfig
			.getProjectList());
	} catch (Exception e) {
	    throw new Exception("Unable to parse project list");
	}
    }

    public void processReport() throws Exception {
	log.info("List of projects to process: " + userProvidedList.length);
	for (String project : userProvidedList) {
	    log.info("Processing for project: " + project);

	    // Set the config options for javascript reading
	    vcProtexConfig.setProjectName(project);

	    Date d = Calendar.getInstance().getTime();

	    DateFormat df = new SimpleDateFormat("MM/dd/yyyy");

	    vcProtexConfig.setProjectDateCreated(df.format(d));

	    File reportLocationSubDir = prepareSubDirectory(reportLocation,
		    project);

	    // Grab all the Protex components
	    List<VCProtexComponent> fullMasterList = null;
	    ProtexComponentList protexComponentList = null;
	    try {

		fullMasterList = vcProtexCollector
			.getComponentsForProject(project);
		log.info("Found protex components: " + fullMasterList.size());
	    } catch (Exception e) {
		log.error("Fatal error during Protex connectivity: "
			+ e.getMessage());
		throw new Exception("Fatal", e);
	    }
	    // Populate the list with Code Center vulnerability information
	    try {
		protexComponentList = vcCCCollector
			.populateVulnerabilities(fullMasterList);

	    } catch (Exception e) {
		log.error("Fatal error during Code Center connectivity: "
			+ e.getMessage());
		throw new Exception("Fatal", e);
	    }

	    try {
		// Transform to JSON
		writeOutJsonFile(reportLocationSubDir,
			protexComponentList.getVersionList(),
			"json_expanded.js", "vcData");
		if (vcCCConfig.isIncludeUnspecifiedVersions()) {
		    writeOutJsonFile(reportLocationSubDir,
			    protexComponentList.getUnspecifiedList(),
			    "json_expanded_unspecified.js", "vcDataNoVersions");
		}

		// Spit out configuration file
		writeOutJsonFile(reportLocationSubDir, vcProtexConfig,
			"json_config.js", "configData");
		log.info(String.format(
			"Finished writing data for project {%s}", project));

	    } catch (Exception e) {
		throw new Exception("Error during JSON transformation", e);
	    }
	}
    }

    
    private void writeOutJsonFile(File reportLocationSubDir, Object object,
	    String fileName, String arrayName) throws IOException {
	Gson gson = new GsonBuilder().setPrettyPrinting().create();
	File jsonFile = new File(reportLocationSubDir + File.separator
		+ JSON_DATA_DIRECTORY + File.separator + fileName);
	log.info("Writing out JSON output to: " + jsonFile);

	FileWriter writer = new FileWriter(jsonFile);

	// Here we want to assign the json data to an array so that we can
	// reference it in our javascript later on.
	String jsonData = gson.toJson(object);
	String jsonDataWrapped = arrayName + " = " + jsonData;
	writer.write(jsonDataWrapped);
	writer.close();

	log.info(String.format("Finished writing to location {%s}", jsonFile));
    }

    public static String[] getProjectList(String projectListString)
	    throws Exception {
	String[] projects = projectListString.split(",");

	if (projects.length == 0)
	    throw new Exception(
		    "Unable to determine project list, please provide comma separated list");

	return projects;

    }

    /**
     * Creates a directory using the project name Parses the name to escape
     * offensive characters.
     * 
     * @param reportLocation
     * @param project
     * @return
     * @throws Exception
     */
    private File prepareSubDirectory(File reportLocation, String project)
	    throws Exception {
	project = formatProjectPath(project);
	File reportLocationSubDir = new File(reportLocation.toString()
		+ File.separator + project);
	if (!reportLocationSubDir.exists()) {
	    boolean dirsMade = reportLocationSubDir.mkdirs();
	    if (!dirsMade)
		throw new Exception(
			"Unable to create report sub-directory for project: "
				+ project);
	}

	// Copy the web resources into this new location
	ClassLoader classLoader = getClass().getClassLoader();
	File webresources = new File(classLoader.getResource(WEB_RESOURCE)
		.getFile());

	if (!webresources.exists())
	    throw new Exception(
		    "Fatal exception, internal web resources are missing!");

	File[] webSubDirs = webresources.listFiles();
	if (webSubDirs.length == 0)
	    throw new Exception(
		    "Fatal exception, internal web resources sub directories are missing!  Corrupt archive.");

	boolean readable = webresources.setReadable(true);
	if (!readable)
	    throw new Exception(
		    "Fatal. Cannot read internal web resource directory!");

	try {
	    for (File webSubDir : webSubDirs) {
		if (webSubDir.isDirectory())
		    FileUtils.copyDirectoryToDirectory(webSubDir,
			    reportLocationSubDir);
		else
		    FileUtils.copyFileToDirectory(webSubDir,
			    reportLocationSubDir);
	    }
	} catch (IOException ioe) {
	    throw new Exception("Error during creation of report directory",
		    ioe);
	}

	return reportLocationSubDir;
    }

    /**
     * Grabs the user specified location for reports
     * 
     * @return
     * @throws CommonFrameworkException
     */
    private File getReportLocation() throws CommonFrameworkException {
	String reportLocation = vcProtexConfig.getReportLocation();
	if (reportLocation == null)
	    throw new CommonFrameworkException(vcProtexConfig,
		    "Report location not specified");

	File f = new File(reportLocation);
	if (!f.exists())
	    throw new CommonFrameworkException(vcProtexConfig, String.format(
		    "Report location {%s} does not exist", reportLocation));

	if (!f.canWrite())
	    throw new CommonFrameworkException(vcProtexConfig, String.format(
		    "Report location {%s} has no write access", reportLocation));

	return f;
    }

    private String formatProjectPath(String name) {
	if (name == null)
	    return name;

	name = name.replaceAll("\"", "");
	name = name.replaceAll("#", "_");
	name = name.trim();

	return name;
    }

}
