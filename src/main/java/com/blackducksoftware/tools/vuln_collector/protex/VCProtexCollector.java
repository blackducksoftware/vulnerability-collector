/*******************************************************************************
 * Copyright (C) 2015 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2 only
 * as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License version 2
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *******************************************************************************/
package com.blackducksoftware.tools.vuln_collector.protex;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.blackducksoftware.sdk.fault.SdkFault;
import com.blackducksoftware.sdk.protex.common.ComponentKey;
import com.blackducksoftware.sdk.protex.component.Component;
import com.blackducksoftware.sdk.protex.component.ComponentApi;
import com.blackducksoftware.sdk.protex.project.bom.BomApi;
import com.blackducksoftware.sdk.protex.project.bom.BomComponent;
import com.blackducksoftware.tools.commonframework.core.exception.CommonFrameworkException;
import com.blackducksoftware.tools.commonframework.standard.common.ProjectPojo;
import com.blackducksoftware.tools.commonframework.standard.protex.ProtexProjectPojo;
import com.blackducksoftware.tools.connector.protex.ProtexServerWrapper;
import com.blackducksoftware.tools.vuln_collector.VCConfigurationManager;

/**
 * Responsible for connecting and collecting information
 * 
 * @author akamen
 * 
 */
public class VCProtexCollector {

    private Logger log = Logger.getLogger(VCProtexCollector.class);

    private final VCConfigurationManager protexConfig;

    private final ProtexServerWrapper<ProtexProjectPojo> protexWrapper;

    public VCProtexCollector(VCConfigurationManager vcConfig)
            throws CommonFrameworkException {
        protexConfig = vcConfig;
        protexWrapper = initializeConnection();
    }

    private ProtexServerWrapper<ProtexProjectPojo> initializeConnection()
            throws CommonFrameworkException {
        try {
            return new ProtexServerWrapper<ProtexProjectPojo>(protexConfig, true);
        } catch (Exception e) {
            throw new CommonFrameworkException(protexConfig, e.getMessage());
        }

    }

    /**
     * Collects a list of components per project. Components contain information
     * regarding their name/version/key. The key can be used to reference
     * component information later from the KB.
     * 
     * @param projectName
     * @return
     * @throws CommonFrameworkException
     */
    public List<VCProtexComponent> getComponentsForProject(String projectName)
            throws CommonFrameworkException {
        List<VCProtexComponent> compList = new ArrayList<VCProtexComponent>();
        ProjectPojo pojo = protexWrapper.getProjectByName(projectName);
        BomApi bomApi = protexWrapper.getInternalApiWrapper().getBomApi();
        ComponentApi compApi = protexWrapper.getInternalApiWrapper()
                .getComponentApi();

        try {
            List<BomComponent> bomcomponents = bomApi.getBomComponents(pojo
                    .getProjectKey());

            for (BomComponent bomComp : bomcomponents) {
                if (bomComp != null) // Not sure why, but sometimes a null
                // element is inserted into list.
                {
                    ComponentKey key = null;
                    try {
                        key = bomComp.getComponentKey();
                        // Need to look up the actual component instead of the
                        // generic component
                        Component component = compApi.getComponentByKey(key);
                        VCProtexComponent vcComponent = new VCProtexComponent(
                                key);
                        vcComponent.setCompName(component.getComponentName());
                        vcComponent.setCompVersion(component.getVersionName());
                        vcComponent.setCompHomePage(component.getHomePage());
                        // Add to the list of returned components.
                        compList.add(vcComponent);
                    } catch (SdkFault e) {
                        log.warn("Could not get component information for key: "
                                + key.getComponentId());
                    }
                }

            }

        } catch (Exception e) {
            throw new CommonFrameworkException(protexConfig,
                    "Unable to get SDK component list: " + e.getMessage());
        }

        return compList;
    }

}
